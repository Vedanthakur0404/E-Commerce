import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { addAddress, getAddress } from './checkOutAPI';

const initialState = {
  addressList: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addAddressAsync = createAsyncThunk(
  'counter/addAddress',
  async (params) => {
    // console.log(params)
    const response = await addAddress(params['userId'], params['address']);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const getAddressAsync = createAsyncThunk(
  'counter/getAddress',
  async (userId) => {
    // console.log(params)
    const response = await getAddress(userId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const checkOutSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addAddressAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addAddressAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.addressList.push(action.payload);
      })
      .addCase(getAddressAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAddressAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.addressList = action.payload['address'];
      });
  },
});

export const { increment } = checkOutSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;



export default checkOutSlice.reducer;
